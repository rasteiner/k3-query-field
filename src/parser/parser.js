/**
 * LR parser generated by the Syntax tool.
 *
 * https://www.npmjs.com/package/syntax-cli
 *
 *   npm install -g syntax-cli
 *
 *   syntax-cli --help
 *
 * To regenerate run:
 *
 *   syntax-cli \
 *     --grammar ~/path-to-grammar-file \
 *     --mode <parsing-mode> \
 *     --output ~/path-to-output-parser-file.js
 */

'use strict';

/**
 * Matched token text.
 */
let yytext;

/**
 * Length of the matched token text.
 */
let yyleng;

/**
 * Storage object.
 */
let yy = {};

/**
 * Result of semantic action.
 */
let __;

/**
 * Result location object.
 */
let __loc;

function yyloc(start, end) {
  if (!yy.options.captureLocations) {
    return null;
  }

  // Epsilon doesn't produce location.
  if (!start || !end) {
    return start || end;
  }

  return {
    startOffset: start.startOffset,
    endOffset: end.endOffset,
    startLine: start.startLine,
    endLine: end.endLine,
    startColumn: start.startColumn,
    endColumn: end.endColumn,
  };
}

const EOF = '$';

/**
 * List of productions (generated by Syntax tool).
 */
const productions = [[-1,1,(_1) => { __ = _1 }],
[0,1,(_1) => { __ = _1 }],
[1,1,(_1) => { __ = _1 }],
[1,4,(_1,_2,_3,_4) => {  __ = [ 'subscript', [_1, _3] ]  }],
[2,1,(_1) => { __ = _1 }],
[2,3,(_1,_2,_3) => {  __ = ['method', [_1, []]]  }],
[2,4,(_1,_2,_3,_4) => {  __ = ['method', [_1, _3]]  }],
[3,1,(_1) => { __ = _1 }],
[3,3,(_1,_2,_3) => {  __ = ['access', [_1, _3]]  }],
[4,3,(_1,_2,_3) => {  __ = _2  }],
[4,1,(_1) => { __ = _1 }],
[4,1,(_1) => { __ = _1 }],
[5,1,(_1) => {  __ = ['id', _1]  }],
[6,1,(_1) => {  __ = ['val', _1, "'"]  }],
[6,1,(_1) => {  __ = ['val', _1, '"']  }],
[6,1,(_1) => {  __ = ['val', parseInt(_1)]  }],
[6,1,(_1) => {  __ = ['val', parseFloat(_1)]  }],
[6,1,(_1) => {  __ = ['val', true]  }],
[6,1,(_1) => {  __ = ['val', false]  }],
[6,1,(_1) => {  __ = ['val', null]  }],
[6,3,(_1,_2,_3) => {  __ = ['val', _2]  }],
[6,2,(_1,_2) => {  __ = ['val', []]  }],
[7,1,(_1) => {  __ = [ _1 ]  }],
[7,3,(_1,_2,_3) => {  _1.push(_3); __ = _1;  }]];

/**
 * Encoded tokens map.
 */
const tokens = {"LBRACKET":"8","RBRACKET":"9","LPAREN":"10","RPAREN":"11","DOT":"12","IDENTIFIER":"13","STRING1":"14","STRING2":"15","INT":"16","FLOAT":"17","TRUE":"18","FALSE":"19","NULL":"20","COMMA":"21","$":"22"};

/**
 * Parsing table (generated by Syntax tool).
 */
const table = [{"0":1,"1":2,"2":3,"3":4,"4":5,"5":8,"6":7,"8":"s16","10":"s6","13":"s17","14":"s9","15":"s10","16":"s11","17":"s12","18":"s13","19":"s14","20":"s15"},{"22":"acc"},{"8":"s18","9":"r1","11":"r1","12":"s19","21":"r1","22":"r1"},{"8":"r2","9":"r2","10":"s22","11":"r2","12":"r2","21":"r2","22":"r2"},{"8":"r4","9":"r4","10":"r4","11":"r4","12":"r4","21":"r4","22":"r4"},{"8":"r7","9":"r7","10":"r7","11":"r7","12":"r7","21":"r7","22":"r7"},{"0":29,"1":2,"2":3,"3":4,"4":5,"5":8,"6":7,"8":"s16","10":"s6","13":"s17","14":"s9","15":"s10","16":"s11","17":"s12","18":"s13","19":"s14","20":"s15"},{"8":"r10","9":"r10","10":"r10","11":"r10","12":"r10","21":"r10","22":"r10"},{"8":"r11","9":"r11","10":"r11","11":"r11","12":"r11","21":"r11","22":"r11"},{"8":"r13","9":"r13","10":"r13","11":"r13","12":"r13","21":"r13","22":"r13"},{"8":"r14","9":"r14","10":"r14","11":"r14","12":"r14","21":"r14","22":"r14"},{"8":"r15","9":"r15","10":"r15","11":"r15","12":"r15","21":"r15","22":"r15"},{"8":"r16","9":"r16","10":"r16","11":"r16","12":"r16","21":"r16","22":"r16"},{"8":"r17","9":"r17","10":"r17","11":"r17","12":"r17","21":"r17","22":"r17"},{"8":"r18","9":"r18","10":"r18","11":"r18","12":"r18","21":"r18","22":"r18"},{"8":"r19","9":"r19","10":"r19","11":"r19","12":"r19","21":"r19","22":"r19"},{"0":25,"1":2,"2":3,"3":4,"4":5,"5":8,"6":7,"7":31,"8":"s16","9":"s32","10":"s6","13":"s17","14":"s9","15":"s10","16":"s11","17":"s12","18":"s13","19":"s14","20":"s15"},{"8":"r12","9":"r12","10":"r12","11":"r12","12":"r12","21":"r12","22":"r12"},{"0":20,"1":2,"2":3,"3":4,"4":5,"5":8,"6":7,"8":"s16","10":"s6","13":"s17","14":"s9","15":"s10","16":"s11","17":"s12","18":"s13","19":"s14","20":"s15"},{"5":34,"13":"s17"},{"9":"s21"},{"8":"r3","9":"r3","11":"r3","12":"r3","21":"r3","22":"r3"},{"0":25,"1":2,"2":3,"3":4,"4":5,"5":8,"6":7,"7":24,"8":"s16","10":"s6","11":"s23","13":"s17","14":"s9","15":"s10","16":"s11","17":"s12","18":"s13","19":"s14","20":"s15"},{"8":"r5","9":"r5","10":"r5","11":"r5","12":"r5","21":"r5","22":"r5"},{"11":"s26","21":"s27"},{"9":"r22","11":"r22","21":"r22"},{"8":"r6","9":"r6","10":"r6","11":"r6","12":"r6","21":"r6","22":"r6"},{"0":28,"1":2,"2":3,"3":4,"4":5,"5":8,"6":7,"8":"s16","10":"s6","13":"s17","14":"s9","15":"s10","16":"s11","17":"s12","18":"s13","19":"s14","20":"s15"},{"9":"r23","11":"r23","21":"r23"},{"11":"s30"},{"8":"r9","9":"r9","10":"r9","11":"r9","12":"r9","21":"r9","22":"r9"},{"9":"s33","21":"s27"},{"8":"r21","9":"r21","10":"r21","11":"r21","12":"r21","21":"r21","22":"r21"},{"8":"r20","9":"r20","10":"r20","11":"r20","12":"r20","21":"r20","22":"r20"},{"8":"r8","9":"r8","10":"r8","11":"r8","12":"r8","21":"r8","22":"r8"}];

/**
 * Parsing stack.
 */
const stack = [];

/**
 * Tokenizer instance.
 */
let tokenizer;
/**
 * Generic tokenizer used by the parser in the Syntax tool.
 *
 * https://www.npmjs.com/package/syntax-cli
 *
 * See `--custom-tokinzer` to skip this generation, and use a custom one.
 */

const lexRules = [[/^\s+/, function() { /* skip whitespace */ }],
[/^\btrue\b/, function() { return 'TRUE' }],
[/^\bfalse\b/, function() { return 'FALSE' }],
[/^\bnull\b/, function() { return 'NULL' }],
[/^\(/, function() { return 'LPAREN' }],
[/^\)/, function() { return 'RPAREN' }],
[/^\[/, function() { return 'LBRACKET' }],
[/^\]/, function() { return 'RBRACKET' }],
[/^,/, function() { return 'COMMA' }],
[/^\d*\.\d+/, function() { return 'FLOAT' }],
[/^\d+/, function() { return 'INT' }],
[/^\./, function() { return 'DOT' }],
[/^[a-zA-Z0-9_]+/, function() { return 'IDENTIFIER' }],
[/^"(?:\\[\"\\]|[^\"\\])*"/, function() { yytext = yytext.slice(1, -1); return 'STRING2'; }],
[/^'(?:\\[\'\\]|[^\'\\])*'/, function() { yytext = yytext.slice(1, -1); return 'STRING1'; }]];
const lexRulesByConditions = {"INITIAL":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14]};

const EOF_TOKEN = {
  type: EOF,
  value: '',
};

tokenizer = {
  initString(string) {
    this._string = string;
    this._cursor = 0;

    this._states = ['INITIAL'];
    this._tokensQueue = [];

    this._currentLine = 1;
    this._currentColumn = 0;
    this._currentLineBeginOffset = 0;

    /**
     * Matched token location data.
     */
    this._tokenStartOffset = 0;
    this._tokenEndOffset = 0;
    this._tokenStartLine = 1;
    this._tokenEndLine = 1;
    this._tokenStartColumn = 0;
    this._tokenEndColumn = 0;

    return this;
  },

  /**
   * Returns tokenizer states.
   */
  getStates() {
    return this._states;
  },

  getCurrentState() {
    return this._states[this._states.length - 1];
  },

  pushState(state) {
    this._states.push(state);
  },

  begin(state) {
    this.pushState(state);
  },

  popState() {
    if (this._states.length > 1) {
      return this._states.pop();
    }
    return this._states[0];
  },

  getNextToken() {
    // Something was queued, return it.
    if (this._tokensQueue.length > 0) {
      return this.onToken(this._toToken(this._tokensQueue.shift()));
    }

    if (!this.hasMoreTokens()) {
      return this.onToken(EOF_TOKEN);
    }

    let string = this._string.slice(this._cursor);
    let lexRulesForState = lexRulesByConditions[this.getCurrentState()];

    for (let i = 0; i < lexRulesForState.length; i++) {
      let lexRuleIndex = lexRulesForState[i];
      let lexRule = lexRules[lexRuleIndex];

      let matched = this._match(string, lexRule[0]);

      // Manual handling of EOF token (the end of string). Return it
      // as `EOF` symbol.
      if (string === '' && matched === '') {
        this._cursor++;
      }

      if (matched !== null) {
        yytext = matched;
        yyleng = yytext.length;
        let token = lexRule[1].call(this);

        if (!token) {
          return this.getNextToken();
        }

        // If multiple tokens are returned, save them to return
        // on next `getNextToken` call.

        if (Array.isArray(token)) {
          const tokensToQueue = token.slice(1);
          token = token[0];
          if (tokensToQueue.length > 0) {
            this._tokensQueue.unshift(...tokensToQueue);
          }
        }

        return this.onToken(this._toToken(token, yytext));
      }
    }

    if (this.isEOF()) {
      this._cursor++;
      return EOF_TOKEN;
    }

    this.throwUnexpectedToken(
      string[0],
      this._currentLine,
      this._currentColumn
    );
  },

  /**
   * Throws default "Unexpected token" exception, showing the actual
   * line from the source, pointing with the ^ marker to the bad token.
   * In addition, shows `line:column` location.
   */
  throwUnexpectedToken(symbol, line, column) {
    const lineSource = this._string.split('\n')[line - 1];
    let lineData = '';

    if (lineSource) {
      const pad = ' '.repeat(column);
      lineData = '\n\n' + lineSource + '\n' + pad + '^\n';
    }

    throw new SyntaxError(
      `${lineData}Unexpected token: "${symbol}" ` +
      `at ${line}:${column}.`
    );
  },

  getCursor() {
    return this._cursor;
  },

  getCurrentLine() {
    return this._currentLine;
  },

  getCurrentColumn() {
    return this._currentColumn;
  },

  _captureLocation(matched) {
    const nlRe = /\n/g;

    // Absolute offsets.
    this._tokenStartOffset = this._cursor;

    // Line-based locations, start.
    this._tokenStartLine = this._currentLine;
    this._tokenStartColumn =
      this._tokenStartOffset - this._currentLineBeginOffset;

    // Extract `\n` in the matched token.
    let nlMatch;
    while ((nlMatch = nlRe.exec(matched)) !== null) {
      this._currentLine++;
      this._currentLineBeginOffset = this._tokenStartOffset + nlMatch.index + 1;
    }

    this._tokenEndOffset = this._cursor + matched.length;

    // Line-based locations, end.
    this._tokenEndLine = this._currentLine;
    this._tokenEndColumn = this._currentColumn =
      (this._tokenEndOffset - this._currentLineBeginOffset);
  },

  _toToken(tokenType, yytext = '') {
    return {
      // Basic data.
      type: tokenType,
      value: yytext,

      // Location data.
      startOffset: this._tokenStartOffset,
      endOffset: this._tokenEndOffset,
      startLine: this._tokenStartLine,
      endLine: this._tokenEndLine,
      startColumn: this._tokenStartColumn,
      endColumn: this._tokenEndColumn,
    };
  },

  isEOF() {
    return this._cursor === this._string.length;
  },

  hasMoreTokens() {
    return this._cursor <= this._string.length;
  },

  _match(string, regexp) {
    let matched = string.match(regexp);
    if (matched) {
      // Handle `\n` in the matched token to track line numbers.
      this._captureLocation(matched[0]);
      this._cursor += matched[0].length;
      return matched[0];
    }
    return null;
  },

  /**
   * Allows analyzing, and transforming token. Default implementation
   * just passes the token through.
   */
  onToken(token) {
    return token;
  },
};

/**
 * Expose tokenizer so it can be accessed in semantic actions.
 */
yy.lexer = tokenizer;
yy.tokenizer = tokenizer;

/**
 * Global parsing options. Some options can be shadowed per
 * each `parse` call, if the optations are passed.
 *
 * Initalized to the `captureLocations` which is passed
 * from the generator. Other options can be added at runtime.
 */
yy.options = {
  captureLocations: false,
};

/**
 * Parsing module.
 */
const yyparse = {
  /**
   * Sets global parsing options.
   */
  setOptions(options) {
    yy.options = options;
    return this;
  },

  /**
   * Returns parsing options.
   */
  getOptions() {
    return yy.options;
  },

  /**
   * Parses a string.
   */
  parse(string, parseOptions) {
    if (!tokenizer) {
      throw new Error(`Tokenizer instance wasn't specified.`);
    }

    tokenizer.initString(string);

    /**
     * If parse options are passed, override global parse options for
     * this call, and later restore global options.
     */
    let globalOptions = yy.options;
    if (parseOptions) {
      yy.options = Object.assign({}, yy.options, parseOptions);
    }

    /**
     * Allow callers to do setup work based on the
     * parsing string, and passed options.
     */
    yyparse.onParseBegin(string, tokenizer, yy.options);

    stack.length = 0;
    stack.push(0);

    let token = tokenizer.getNextToken();
    let shiftedToken = null;

    do {
      if (!token) {
        // Restore options.
        yy.options = globalOptions;
        unexpectedEndOfInput();
      }

      let state = stack[stack.length - 1];
      let column = tokens[token.type];

      if (!table[state].hasOwnProperty(column)) {
        yy.options = globalOptions;
        unexpectedToken(token);
      }

      let entry = table[state][column];

      // Shift action.
      if (entry[0] === 's') {
        let loc = null;

        if (yy.options.captureLocations) {
          loc = {
            startOffset: token.startOffset,
            endOffset: token.endOffset,
            startLine: token.startLine,
            endLine: token.endLine,
            startColumn: token.startColumn,
            endColumn: token.endColumn,
          };
        }

        shiftedToken = this.onShift(token);

        stack.push(
          {symbol: tokens[shiftedToken.type], semanticValue: shiftedToken.value, loc},
          Number(entry.slice(1))
        );

        token = tokenizer.getNextToken();
      }

      // Reduce action.
      else if (entry[0] === 'r') {
        let productionNumber = entry.slice(1);
        let production = productions[productionNumber];
        let hasSemanticAction = typeof production[2] === 'function';
        let semanticValueArgs = hasSemanticAction ? [] : null;

        const locationArgs = (
          hasSemanticAction && yy.options.captureLocations
            ? []
            : null
        );

        if (production[1] !== 0) {
          let rhsLength = production[1];
          while (rhsLength-- > 0) {
            stack.pop();
            let stackEntry = stack.pop();

            if (hasSemanticAction) {
              semanticValueArgs.unshift(stackEntry.semanticValue);

              if (locationArgs) {
                locationArgs.unshift(stackEntry.loc);
              }
            }
          }
        }

        const reduceStackEntry = {symbol: production[0]};

        if (hasSemanticAction) {
          yytext = shiftedToken ? shiftedToken.value : null;
          yyleng = shiftedToken ? shiftedToken.value.length : null;

          const semanticActionArgs = (
            locationArgs !== null
              ? semanticValueArgs.concat(locationArgs)
              : semanticValueArgs
          );

          production[2](...semanticActionArgs);

          reduceStackEntry.semanticValue = __;

          if (locationArgs) {
            reduceStackEntry.loc = __loc;
          }
        }

        const nextState = stack[stack.length - 1];
        const symbolToReduceWith = production[0];

        stack.push(
          reduceStackEntry,
          table[nextState][symbolToReduceWith]
        );
      }

      // Accept.
      else if (entry === 'acc') {
        stack.pop();
        let parsed = stack.pop();

        if (stack.length !== 1 ||
            stack[0] !== 0 ||
            tokenizer.hasMoreTokens()) {
          // Restore options.
          yy.options = globalOptions;
          unexpectedToken(token);
        }

        if (parsed.hasOwnProperty('semanticValue')) {
          yy.options = globalOptions;
          yyparse.onParseEnd(parsed.semanticValue);
          return parsed.semanticValue;
        }

        yyparse.onParseEnd();

        // Restore options.
        yy.options = globalOptions;
        return true;
      }

    } while (tokenizer.hasMoreTokens() || stack.length > 1);
  },

  setTokenizer(customTokenizer) {
    tokenizer = customTokenizer;
    return yyparse;
  },

  getTokenizer() {
    return tokenizer;
  },

  onParseBegin(string, tokenizer, options) {},
  onParseEnd(parsed) {},

  /**
   * Allows analyzing, and transforming shifted token. Default implementation
   * just passes the token through.
   */
  onShift(token) {
    return token;
  },
};



function unexpectedToken(token) {
  if (token.type === EOF) {
    unexpectedEndOfInput();
  }

  tokenizer.throwUnexpectedToken(
    token.value,
    token.startLine,
    token.startColumn
  );
}

function unexpectedEndOfInput() {
  parseError(`Unexpected end of input.`);
}

function parseError(message) {
  throw new SyntaxError(message);
}

module.exports = yyparse;
